
button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001e6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000798  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e7d  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000245a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <debounce>:
#define BAUD 9600                          // baudrate
#define UBRR_VALUE ((F_CPU)/16/(BAUD)-1)   // zgodnie ze wzorem
#define DEBOUNCE_TIME  1000                            /* microseconds */

uint8_t debounce(void) {
    if (bit_is_clear(PIND, PD2)) {      /* button is pressed now */
  80:	4a 9b       	sbis	0x09, 2	; 9
  82:	02 c0       	rjmp	.+4      	; 0x88 <debounce+0x8>
        _delay_us(DEBOUNCE_TIME);
        if (bit_is_clear(PIND, PD2)) {            /* still pressed */
            return (1);    
        }  
    }
    return (0);
  84:	80 e0       	ldi	r24, 0x00	; 0
}
  86:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e9       	ldi	r24, 0x9F	; 159
  8a:	9f e0       	ldi	r25, 0x0F	; 15
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <debounce+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <debounce+0x12>
  92:	00 00       	nop
#define DEBOUNCE_TIME  1000                            /* microseconds */

uint8_t debounce(void) {
    if (bit_is_clear(PIND, PD2)) {      /* button is pressed now */
        _delay_us(DEBOUNCE_TIME);
        if (bit_is_clear(PIND, PD2)) {            /* still pressed */
  94:	89 b1       	in	r24, 0x09	; 9
            return (1);    
  96:	82 fb       	bst	r24, 2
  98:	99 27       	eor	r25, r25
  9a:	90 f9       	bld	r25, 0
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	89 27       	eor	r24, r25
  a0:	08 95       	ret

000000a2 <main>:
        }  
    }
    return (0);
}
int main(void) {
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	c0 5d       	subi	r28, 0xD0	; 208
  ac:	d7 40       	sbci	r29, 0x07	; 7
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61

    // -------- Inits --------- //
    DDRB = 0xff; // led as output
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
    DDRD &= ~(1 << PD2);    /* Data Direction Register B:
  bc:	52 98       	cbi	0x0a, 2	; 10
                                   enables input. */
    PORTD |= (1<<PD2);  // pull up 
  be:	5a 9a       	sbi	0x0b, 2	; 11
    int8_t buffor[2000];
    int counter = 0;
    int reading = 0;
    int printing = 0;
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f0 e0       	ldi	r31, 0x00	; 0
    DDRD &= ~(1 << PD2);    /* Data Direction Register B:
                                   enables input. */
    PORTD |= (1<<PD2);  // pull up 
    int8_t buffor[2000];
    int counter = 0;
    int reading = 0;
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
    DDRB = 0xff; // led as output
    DDRD &= ~(1 << PD2);    /* Data Direction Register B:
                                   enables input. */
    PORTD |= (1<<PD2);  // pull up 
    int8_t buffor[2000];
    int counter = 0;
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
        else {                                              /* not pressed */
        //    was_pressed = 0;
            buffor[counter] = 0;
            }
        counter ++;
      counter %= 2000;
  cc:	00 ed       	ldi	r16, 0xD0	; 208
  ce:	17 e0       	ldi	r17, 0x07	; 7
        if (!reading && bit_is_clear(PIND, PD2)){ reading ++;}
      if(reading){
       // if(debounce()){
      //      if(! was_pressed){ 
        if(bit_is_clear(PIND, PD2)){
                buffor[counter] = 1;                        /* pressed */   
  d0:	ff 24       	eor	r15, r15
  d2:	f3 94       	inc	r15
    if(counter == 1000) { printing = 1;}
    else if(printing == 1 && counter == 0){ printing = 2; }
    if(printing == 1){
            if(buffor[counter-1000]==0) { PORTB = 0b11000011;}
            else if(buffor[counter-1000]==1)
                 {PORTB = 0b00111100;}
  d4:	4c e3       	ldi	r20, 0x3C	; 60
  d6:	d4 2e       	mov	r13, r20


    if(counter == 1000) { printing = 1;}
    else if(printing == 1 && counter == 0){ printing = 2; }
    if(printing == 1){
            if(buffor[counter-1000]==0) { PORTB = 0b11000011;}
  d8:	53 ec       	ldi	r21, 0xC3	; 195
  da:	e5 2e       	mov	r14, r21
  dc:	1d c0       	rjmp	.+58     	; 0x118 <main+0x76>
        if (!reading && bit_is_clear(PIND, PD2)){ reading ++;}
      if(reading){
       // if(debounce()){
      //      if(! was_pressed){ 
        if(bit_is_clear(PIND, PD2)){
                buffor[counter] = 1;                        /* pressed */   
  de:	a1 e0       	ldi	r26, 0x01	; 1
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	ac 0f       	add	r26, r28
  e4:	bd 1f       	adc	r27, r29
  e6:	a8 0f       	add	r26, r24
  e8:	b9 1f       	adc	r27, r25
  ea:	fc 92       	st	X, r15
//            }
        else {                                              /* not pressed */
        //    was_pressed = 0;
            buffor[counter] = 0;
            }
        counter ++;
  ec:	01 96       	adiw	r24, 0x01	; 1
      counter %= 2000;
  ee:	b8 01       	movw	r22, r16
  f0:	0e 94 c9 00 	call	0x192	; 0x192 <__divmodhi4>
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
       }


    if(counter == 1000) { printing = 1;}
  f8:	88 3e       	cpi	r24, 0xE8	; 232
  fa:	43 e0       	ldi	r20, 0x03	; 3
  fc:	94 07       	cpc	r25, r20
  fe:	e9 f0       	breq	.+58     	; 0x13a <main+0x98>
    else if(printing == 1 && counter == 0){ printing = 2; }
 100:	e1 30       	cpi	r30, 0x01	; 1
 102:	f1 05       	cpc	r31, r1
 104:	c1 f0       	breq	.+48     	; 0x136 <main+0x94>
            else if(buffor[counter-1000]==1)
                 {PORTB = 0b00111100;}
            }

    
    else if (printing == 2){
 106:	e2 30       	cpi	r30, 0x02	; 2
 108:	f1 05       	cpc	r31, r1
 10a:	21 f1       	breq	.+72     	; 0x154 <main+0xb2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	af e9       	ldi	r26, 0x9F	; 159
 10e:	bf e0       	ldi	r27, 0x0F	; 15
 110:	11 97       	sbiw	r26, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x6e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x74>
 116:	00 00       	nop
    int reading = 0;
    int printing = 0;
//    int was_pressed = 0;
  // ------ Event loop ------ //
  while (1) {
        if (!reading && bit_is_clear(PIND, PD2)){ reading ++;}
 118:	21 15       	cp	r18, r1
 11a:	31 05       	cpc	r19, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <main+0x80>
 11e:	4a 99       	sbic	0x09, 2	; 9
 120:	eb cf       	rjmp	.-42     	; 0xf8 <main+0x56>
      if(reading){
       // if(debounce()){
      //      if(! was_pressed){ 
        if(bit_is_clear(PIND, PD2)){
 122:	4a 9b       	sbis	0x09, 2	; 9
 124:	dc cf       	rjmp	.-72     	; 0xde <main+0x3c>
         //       was_pressed = 1; 
                }
//            }
        else {                                              /* not pressed */
        //    was_pressed = 0;
            buffor[counter] = 0;
 126:	a1 e0       	ldi	r26, 0x01	; 1
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	ac 0f       	add	r26, r28
 12c:	bd 1f       	adc	r27, r29
 12e:	a8 0f       	add	r26, r24
 130:	b9 1f       	adc	r27, r25
 132:	1c 92       	st	X, r1
 134:	db cf       	rjmp	.-74     	; 0xec <main+0x4a>
      counter %= 2000;
       }


    if(counter == 1000) { printing = 1;}
    else if(printing == 1 && counter == 0){ printing = 2; }
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	69 f0       	breq	.+26     	; 0x154 <main+0xb2>
    if(printing == 1){
            if(buffor[counter-1000]==0) { PORTB = 0b11000011;}
 13a:	e9 e1       	ldi	r30, 0x19	; 25
 13c:	fc ef       	ldi	r31, 0xFC	; 252
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	40 81       	ld	r20, Z
 148:	41 11       	cpse	r20, r1
 14a:	11 c0       	rjmp	.+34     	; 0x16e <main+0xcc>
 14c:	e5 b8       	out	0x05, r14	; 5
 14e:	e1 e0       	ldi	r30, 0x01	; 1
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	dc cf       	rjmp	.-72     	; 0x10c <main+0x6a>
                 {PORTB = 0b00111100;}
            }

    
    else if (printing == 2){
            if(buffor[counter+1000]==0) { PORTB = 0b11000011;}
 154:	e9 ee       	ldi	r30, 0xE9	; 233
 156:	f3 e0       	ldi	r31, 0x03	; 3
 158:	ec 0f       	add	r30, r28
 15a:	fd 1f       	adc	r31, r29
 15c:	e8 0f       	add	r30, r24
 15e:	f9 1f       	adc	r31, r25
 160:	40 81       	ld	r20, Z
 162:	41 11       	cpse	r20, r1
 164:	09 c0       	rjmp	.+18     	; 0x178 <main+0xd6>
 166:	e5 b8       	out	0x05, r14	; 5
 168:	e2 e0       	ldi	r30, 0x02	; 2
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	cf cf       	rjmp	.-98     	; 0x10c <main+0x6a>

    if(counter == 1000) { printing = 1;}
    else if(printing == 1 && counter == 0){ printing = 2; }
    if(printing == 1){
            if(buffor[counter-1000]==0) { PORTB = 0b11000011;}
            else if(buffor[counter-1000]==1)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	41 f0       	breq	.+16     	; 0x182 <main+0xe0>
 172:	e1 e0       	ldi	r30, 0x01	; 1
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ca cf       	rjmp	.-108    	; 0x10c <main+0x6a>
            }

    
    else if (printing == 2){
            if(buffor[counter+1000]==0) { PORTB = 0b11000011;}
            else if(buffor[counter+1000]==1)
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	39 f0       	breq	.+14     	; 0x18a <main+0xe8>
 17c:	e2 e0       	ldi	r30, 0x02	; 2
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	c5 cf       	rjmp	.-118    	; 0x10c <main+0x6a>
    if(counter == 1000) { printing = 1;}
    else if(printing == 1 && counter == 0){ printing = 2; }
    if(printing == 1){
            if(buffor[counter-1000]==0) { PORTB = 0b11000011;}
            else if(buffor[counter-1000]==1)
                 {PORTB = 0b00111100;}
 182:	d5 b8       	out	0x05, r13	; 5
 184:	e1 e0       	ldi	r30, 0x01	; 1
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	c1 cf       	rjmp	.-126    	; 0x10c <main+0x6a>

    
    else if (printing == 2){
            if(buffor[counter+1000]==0) { PORTB = 0b11000011;}
            else if(buffor[counter+1000]==1)
                 {PORTB = 0b00111100;}
 18a:	d5 b8       	out	0x05, r13	; 5
 18c:	e2 e0       	ldi	r30, 0x02	; 2
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	bd cf       	rjmp	.-134    	; 0x10c <main+0x6a>

00000192 <__divmodhi4>:
 192:	97 fb       	bst	r25, 7
 194:	07 2e       	mov	r0, r23
 196:	16 f4       	brtc	.+4      	; 0x19c <__divmodhi4+0xa>
 198:	00 94       	com	r0
 19a:	07 d0       	rcall	.+14     	; 0x1aa <__divmodhi4_neg1>
 19c:	77 fd       	sbrc	r23, 7
 19e:	09 d0       	rcall	.+18     	; 0x1b2 <__divmodhi4_neg2>
 1a0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__udivmodhi4>
 1a4:	07 fc       	sbrc	r0, 7
 1a6:	05 d0       	rcall	.+10     	; 0x1b2 <__divmodhi4_neg2>
 1a8:	3e f4       	brtc	.+14     	; 0x1b8 <__divmodhi4_exit>

000001aa <__divmodhi4_neg1>:
 1aa:	90 95       	com	r25
 1ac:	81 95       	neg	r24
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	08 95       	ret

000001b2 <__divmodhi4_neg2>:
 1b2:	70 95       	com	r23
 1b4:	61 95       	neg	r22
 1b6:	7f 4f       	sbci	r23, 0xFF	; 255

000001b8 <__divmodhi4_exit>:
 1b8:	08 95       	ret

000001ba <__udivmodhi4>:
 1ba:	aa 1b       	sub	r26, r26
 1bc:	bb 1b       	sub	r27, r27
 1be:	51 e1       	ldi	r21, 0x11	; 17
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <__udivmodhi4_ep>

000001c2 <__udivmodhi4_loop>:
 1c2:	aa 1f       	adc	r26, r26
 1c4:	bb 1f       	adc	r27, r27
 1c6:	a6 17       	cp	r26, r22
 1c8:	b7 07       	cpc	r27, r23
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <__udivmodhi4_ep>
 1cc:	a6 1b       	sub	r26, r22
 1ce:	b7 0b       	sbc	r27, r23

000001d0 <__udivmodhi4_ep>:
 1d0:	88 1f       	adc	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	5a 95       	dec	r21
 1d6:	a9 f7       	brne	.-22     	; 0x1c2 <__udivmodhi4_loop>
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
