
morse2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000870  00000904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000870  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080012a  0080012a  0000092e  2**0
                  ALLOC
  3 .stab         000009cc  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f29  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002225  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9e:	0c 94 36 04 	jmp	0x86c	; 0x86c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:
#define ITER 8
// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e4:	08 95       	ret

000000e6 <debounce>:
  return UDR0;
}

FILE uart_file;
uint8_t debounce(void) {
    if (bit_is_clear(PIND, PD2)) {      /* button is pressed now */
  e6:	4a 9b       	sbis	0x09, 2	; 9
  e8:	02 c0       	rjmp	.+4      	; 0xee <debounce+0x8>
        _delay_us(DEBOUNCE_TIME);
        if (bit_is_clear(PIND, PD2)) {            /* still pressed */
            return (1);    
        }  
    }
    return (0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
}
  ec:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e9       	ldi	r24, 0x9F	; 159
  f0:	9f e0       	ldi	r25, 0x0F	; 15
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <debounce+0xc>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <debounce+0x12>
  f8:	00 00       	nop

FILE uart_file;
uint8_t debounce(void) {
    if (bit_is_clear(PIND, PD2)) {      /* button is pressed now */
        _delay_us(DEBOUNCE_TIME);
        if (bit_is_clear(PIND, PD2)) {            /* still pressed */
  fa:	89 b1       	in	r24, 0x09	; 9
            return (1);    
  fc:	82 fb       	bst	r24, 2
  fe:	99 27       	eor	r25, r25
 100:	90 f9       	bld	r25, 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	89 27       	eor	r24, r25
 106:	08 95       	ret

00000108 <morseChar>:
}
const char morse [30] = {'H','S','V','I','F','U','!','E','L','R','?','A','P','W','J','*','B','D','X','N','C','K','Y','T','Z','G','Q','M','@','O'};

char morseChar(uint8_t x,uint8_t n,uint8_t i) {
  //  printf("%d\r\n",n);
    if( x == 0) return morse[n];
 108:	88 23       	and	r24, r24
 10a:	79 f0       	breq	.+30     	; 0x12a <morseChar+0x22>
 10c:	28 2f       	mov	r18, r24
 10e:	21 70       	andi	r18, 0x01	; 1
    if( x&1 )
        return morseChar(x>>2,n-i,i>>1);
 110:	94 2f       	mov	r25, r20
 112:	96 95       	lsr	r25
 114:	e6 2f       	mov	r30, r22
 116:	e4 1b       	sub	r30, r20
 118:	86 95       	lsr	r24
 11a:	86 95       	lsr	r24
    return morseChar(x>>2,n+i,i>>1);
 11c:	46 0f       	add	r20, r22
 11e:	21 11       	cpse	r18, r1
 120:	4e 2f       	mov	r20, r30
 122:	64 2f       	mov	r22, r20
 124:	49 2f       	mov	r20, r25
}
const char morse [30] = {'H','S','V','I','F','U','!','E','L','R','?','A','P','W','J','*','B','D','X','N','C','K','Y','T','Z','G','Q','M','@','O'};

char morseChar(uint8_t x,uint8_t n,uint8_t i) {
  //  printf("%d\r\n",n);
    if( x == 0) return morse[n];
 126:	81 11       	cpse	r24, r1
 128:	f1 cf       	rjmp	.-30     	; 0x10c <morseChar+0x4>
 12a:	e6 2f       	mov	r30, r22
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	08 95       	ret

00000136 <morseCode>:
 136:	88 23       	and	r24, r24
 138:	b9 f0       	breq	.+46     	; 0x168 <morseCode+0x32>
 13a:	98 e0       	ldi	r25, 0x08	; 8
 13c:	2f e0       	ldi	r18, 0x0F	; 15
 13e:	48 2f       	mov	r20, r24
 140:	41 70       	andi	r20, 0x01	; 1
    if( x&1 )
        return morseChar(x>>2,n-i,i>>1);
 142:	39 2f       	mov	r19, r25
 144:	36 95       	lsr	r19
 146:	e2 2f       	mov	r30, r18
 148:	e9 1b       	sub	r30, r25
 14a:	86 95       	lsr	r24
 14c:	86 95       	lsr	r24
    return morseChar(x>>2,n+i,i>>1);
 14e:	92 0f       	add	r25, r18
 150:	41 11       	cpse	r20, r1
 152:	01 c0       	rjmp	.+2      	; 0x156 <morseCode+0x20>
 154:	e9 2f       	mov	r30, r25
 156:	2e 2f       	mov	r18, r30
 158:	93 2f       	mov	r25, r19
}
const char morse [30] = {'H','S','V','I','F','U','!','E','L','R','?','A','P','W','J','*','B','D','X','N','C','K','Y','T','Z','G','Q','M','@','O'};

char morseChar(uint8_t x,uint8_t n,uint8_t i) {
  //  printf("%d\r\n",n);
    if( x == 0) return morse[n];
 15a:	81 11       	cpse	r24, r1
 15c:	f0 cf       	rjmp	.-32     	; 0x13e <morseCode+0x8>
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	08 95       	ret
 168:	8a e2       	ldi	r24, 0x2A	; 42
    if( x&1 )
        return morseChar(x>>2,n-i,i>>1);
    return morseChar(x>>2,n+i,i>>1);
}
char morseCode(uint8_t x){
    return morseChar(x,START,ITER);
 16a:	08 95       	ret

0000016c <main>:
#define ITER 8
// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
 16c:	87 e6       	ldi	r24, 0x67	; 103
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 174:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 178:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    // -------- Inits --------- //

  // zainicjalizuj UART
  uart_init();
  // skonfiguruj strumienie wejścia/wyjścia
  fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 188:	8a e2       	ldi	r24, 0x2A	; 42
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	23 e5       	ldi	r18, 0x53	; 83
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <__data_end+0x9>
 194:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <__data_end+0x8>
 198:	2c e5       	ldi	r18, 0x5C	; 92
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <__data_end+0xb>
 1a0:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <__data_end+0xa>
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <__data_end+0x3>
 1aa:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0xd>
 1ae:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end+0xc>
  stdin = stdout = stderr = &uart_file;
 1b2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__iob+0x5>
 1b6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__iob+0x4>
 1ba:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__iob+0x3>
 1be:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__iob+0x2>
 1c2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__iob+0x1>
 1c6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__iob>
    DDRB = 0xff; // led as output
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	84 b9       	out	0x04, r24	; 4
    DDRD &= ~(1 << PD2);    /* Data Direction Register B:
 1ce:	52 98       	cbi	0x0a, 2	; 10
                                   enables input. */
    PORTD |= (1<<PD2);  // pull up 
 1d0:	5a 9a       	sbi	0x0b, 2	; 11
       _delay_ms(DOT);
       if(bit_is_clear(PIND, PD2)){
            _delay_ms(DOT);
            if(bit_is_clear(PIND, PD2)){
                    if(bit_is_clear(PIND, PD2)){
                        PORTB = 0b00111100;
 1d2:	0c e3       	ldi	r16, 0x3C	; 60
                        _delay_ms(100);
                        PORTB = 0b11000011;
 1d4:	13 ec       	ldi	r17, 0xC3	; 195
            }
        }

    }*/
        if(!(buffer==0)) {
                printf("%c\r\n",morseCode(buffer));
 1d6:	c4 e2       	ldi	r28, 0x24	; 36
 1d8:	d1 e0       	ldi	r29, 0x01	; 1

//    int was_pressed = 0;
  // ------ Event loop ------ //
  while (1) {
//areas of correction +- .5 s extract function <<<TODO 
    if(bit_is_clear(PIND, PD2)){
 1da:	4a 99       	sbic	0x09, 2	; 9
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <main+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	83 ed       	ldi	r24, 0xD3	; 211
 1e2:	90 e3       	ldi	r25, 0x30	; 48
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x78>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x82>
 1ee:	00 00       	nop
       _delay_ms(DOT);
       if(bit_is_clear(PIND, PD2)){
 1f0:	4a 99       	sbic	0x09, 2	; 9
 1f2:	f3 cf       	rjmp	.-26     	; 0x1da <main+0x6e>
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	83 ed       	ldi	r24, 0xD3	; 211
 1f8:	90 e3       	ldi	r25, 0x30	; 48
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x8e>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x98>
 204:	00 00       	nop
            _delay_ms(DOT);
            if(bit_is_clear(PIND, PD2)){
 206:	4a 99       	sbic	0x09, 2	; 9
 208:	1d c0       	rjmp	.+58     	; 0x244 <main+0xd8>
                    if(bit_is_clear(PIND, PD2)){
 20a:	4a 99       	sbic	0x09, 2	; 9
 20c:	1b c0       	rjmp	.+54     	; 0x244 <main+0xd8>
                        PORTB = 0b00111100;
 20e:	05 b9       	out	0x05, r16	; 5
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	81 ee       	ldi	r24, 0xE1	; 225
 214:	94 e0       	ldi	r25, 0x04	; 4
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0xaa>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0xb4>
 220:	00 00       	nop
                        _delay_ms(100);
                        PORTB = 0b11000011;
 222:	15 b9       	out	0x05, r17	; 5
                        printf("_\r\n");
 224:	8e e1       	ldi	r24, 0x1E	; 30
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 3e 01 	call	0x27c	; 0x27c <puts>
 22c:	84 e5       	ldi	r24, 0x54	; 84
            }
        }

    }*/
        if(!(buffer==0)) {
                printf("%c\r\n",morseCode(buffer));
 22e:	1f 92       	push	r1
 230:	8f 93       	push	r24
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	0e 94 28 01 	call	0x250	; 0x250 <printf>
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	cb cf       	rjmp	.-106    	; 0x1da <main+0x6e>
                        PORTB = 0b11000011;
                        printf("_\r\n");
                        buffer |= 2;
                    }
                    else
                    {printf(".\r\n");
 244:	81 e2       	ldi	r24, 0x21	; 33
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 3e 01 	call	0x27c	; 0x27c <puts>
 24c:	85 e4       	ldi	r24, 0x45	; 69
 24e:	ef cf       	rjmp	.-34     	; 0x22e <main+0xc2>

00000250 <printf>:
 250:	a0 e0       	ldi	r26, 0x00	; 0
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	ee e2       	ldi	r30, 0x2E	; 46
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__prologue_saves__+0x20>
 25c:	ae 01       	movw	r20, r28
 25e:	4b 5f       	subi	r20, 0xFB	; 251
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	fa 01       	movw	r30, r20
 264:	61 91       	ld	r22, Z+
 266:	71 91       	ld	r23, Z+
 268:	af 01       	movw	r20, r30
 26a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__iob+0x2>
 26e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__iob+0x3>
 272:	0e 94 6e 01 	call	0x2dc	; 0x2dc <vfprintf>
 276:	e2 e0       	ldi	r30, 0x02	; 2
 278:	0c 94 2b 04 	jmp	0x856	; 0x856 <__epilogue_restores__+0x20>

0000027c <puts>:
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__iob+0x2>
 288:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__iob+0x3>
 28c:	23 81       	ldd	r18, Z+3	; 0x03
 28e:	21 ff       	sbrs	r18, 1
 290:	1b c0       	rjmp	.+54     	; 0x2c8 <puts+0x4c>
 292:	8c 01       	movw	r16, r24
 294:	d0 e0       	ldi	r29, 0x00	; 0
 296:	c0 e0       	ldi	r28, 0x00	; 0
 298:	f8 01       	movw	r30, r16
 29a:	81 91       	ld	r24, Z+
 29c:	8f 01       	movw	r16, r30
 29e:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__iob+0x2>
 2a2:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <__iob+0x3>
 2a6:	db 01       	movw	r26, r22
 2a8:	18 96       	adiw	r26, 0x08	; 8
 2aa:	ed 91       	ld	r30, X+
 2ac:	fc 91       	ld	r31, X
 2ae:	19 97       	sbiw	r26, 0x09	; 9
 2b0:	88 23       	and	r24, r24
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <puts+0x44>
 2b4:	09 95       	icall
 2b6:	89 2b       	or	r24, r25
 2b8:	79 f3       	breq	.-34     	; 0x298 <puts+0x1c>
 2ba:	df ef       	ldi	r29, 0xFF	; 255
 2bc:	cf ef       	ldi	r28, 0xFF	; 255
 2be:	ec cf       	rjmp	.-40     	; 0x298 <puts+0x1c>
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	09 95       	icall
 2c4:	89 2b       	or	r24, r25
 2c6:	19 f0       	breq	.+6      	; 0x2ce <puts+0x52>
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <puts+0x56>
 2ce:	8d 2f       	mov	r24, r29
 2d0:	9c 2f       	mov	r25, r28
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <vfprintf>:
 2dc:	ab e0       	ldi	r26, 0x0B	; 11
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	e4 e7       	ldi	r30, 0x74	; 116
 2e2:	f1 e0       	ldi	r31, 0x01	; 1
 2e4:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__prologue_saves__>
 2e8:	6c 01       	movw	r12, r24
 2ea:	7b 01       	movw	r14, r22
 2ec:	8a 01       	movw	r16, r20
 2ee:	fc 01       	movw	r30, r24
 2f0:	17 82       	std	Z+7, r1	; 0x07
 2f2:	16 82       	std	Z+6, r1	; 0x06
 2f4:	83 81       	ldd	r24, Z+3	; 0x03
 2f6:	81 ff       	sbrs	r24, 1
 2f8:	cc c1       	rjmp	.+920    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 2fa:	ce 01       	movw	r24, r28
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	3c 01       	movw	r6, r24
 300:	f6 01       	movw	r30, r12
 302:	93 81       	ldd	r25, Z+3	; 0x03
 304:	f7 01       	movw	r30, r14
 306:	93 fd       	sbrc	r25, 3
 308:	85 91       	lpm	r24, Z+
 30a:	93 ff       	sbrs	r25, 3
 30c:	81 91       	ld	r24, Z+
 30e:	7f 01       	movw	r14, r30
 310:	88 23       	and	r24, r24
 312:	09 f4       	brne	.+2      	; 0x316 <vfprintf+0x3a>
 314:	ba c1       	rjmp	.+884    	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 316:	85 32       	cpi	r24, 0x25	; 37
 318:	39 f4       	brne	.+14     	; 0x328 <vfprintf+0x4c>
 31a:	93 fd       	sbrc	r25, 3
 31c:	85 91       	lpm	r24, Z+
 31e:	93 ff       	sbrs	r25, 3
 320:	81 91       	ld	r24, Z+
 322:	7f 01       	movw	r14, r30
 324:	85 32       	cpi	r24, 0x25	; 37
 326:	29 f4       	brne	.+10     	; 0x332 <vfprintf+0x56>
 328:	b6 01       	movw	r22, r12
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 330:	e7 cf       	rjmp	.-50     	; 0x300 <vfprintf+0x24>
 332:	91 2c       	mov	r9, r1
 334:	21 2c       	mov	r2, r1
 336:	31 2c       	mov	r3, r1
 338:	ff e1       	ldi	r31, 0x1F	; 31
 33a:	f3 15       	cp	r31, r3
 33c:	d8 f0       	brcs	.+54     	; 0x374 <vfprintf+0x98>
 33e:	8b 32       	cpi	r24, 0x2B	; 43
 340:	79 f0       	breq	.+30     	; 0x360 <vfprintf+0x84>
 342:	38 f4       	brcc	.+14     	; 0x352 <vfprintf+0x76>
 344:	80 32       	cpi	r24, 0x20	; 32
 346:	79 f0       	breq	.+30     	; 0x366 <vfprintf+0x8a>
 348:	83 32       	cpi	r24, 0x23	; 35
 34a:	a1 f4       	brne	.+40     	; 0x374 <vfprintf+0x98>
 34c:	23 2d       	mov	r18, r3
 34e:	20 61       	ori	r18, 0x10	; 16
 350:	1d c0       	rjmp	.+58     	; 0x38c <vfprintf+0xb0>
 352:	8d 32       	cpi	r24, 0x2D	; 45
 354:	61 f0       	breq	.+24     	; 0x36e <vfprintf+0x92>
 356:	80 33       	cpi	r24, 0x30	; 48
 358:	69 f4       	brne	.+26     	; 0x374 <vfprintf+0x98>
 35a:	23 2d       	mov	r18, r3
 35c:	21 60       	ori	r18, 0x01	; 1
 35e:	16 c0       	rjmp	.+44     	; 0x38c <vfprintf+0xb0>
 360:	83 2d       	mov	r24, r3
 362:	82 60       	ori	r24, 0x02	; 2
 364:	38 2e       	mov	r3, r24
 366:	e3 2d       	mov	r30, r3
 368:	e4 60       	ori	r30, 0x04	; 4
 36a:	3e 2e       	mov	r3, r30
 36c:	2a c0       	rjmp	.+84     	; 0x3c2 <vfprintf+0xe6>
 36e:	f3 2d       	mov	r31, r3
 370:	f8 60       	ori	r31, 0x08	; 8
 372:	1d c0       	rjmp	.+58     	; 0x3ae <vfprintf+0xd2>
 374:	37 fc       	sbrc	r3, 7
 376:	2d c0       	rjmp	.+90     	; 0x3d2 <vfprintf+0xf6>
 378:	20 ed       	ldi	r18, 0xD0	; 208
 37a:	28 0f       	add	r18, r24
 37c:	2a 30       	cpi	r18, 0x0A	; 10
 37e:	40 f0       	brcs	.+16     	; 0x390 <vfprintf+0xb4>
 380:	8e 32       	cpi	r24, 0x2E	; 46
 382:	b9 f4       	brne	.+46     	; 0x3b2 <vfprintf+0xd6>
 384:	36 fc       	sbrc	r3, 6
 386:	81 c1       	rjmp	.+770    	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 388:	23 2d       	mov	r18, r3
 38a:	20 64       	ori	r18, 0x40	; 64
 38c:	32 2e       	mov	r3, r18
 38e:	19 c0       	rjmp	.+50     	; 0x3c2 <vfprintf+0xe6>
 390:	36 fe       	sbrs	r3, 6
 392:	06 c0       	rjmp	.+12     	; 0x3a0 <vfprintf+0xc4>
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	98 9e       	mul	r9, r24
 398:	20 0d       	add	r18, r0
 39a:	11 24       	eor	r1, r1
 39c:	92 2e       	mov	r9, r18
 39e:	11 c0       	rjmp	.+34     	; 0x3c2 <vfprintf+0xe6>
 3a0:	ea e0       	ldi	r30, 0x0A	; 10
 3a2:	2e 9e       	mul	r2, r30
 3a4:	20 0d       	add	r18, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	22 2e       	mov	r2, r18
 3aa:	f3 2d       	mov	r31, r3
 3ac:	f0 62       	ori	r31, 0x20	; 32
 3ae:	3f 2e       	mov	r3, r31
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <vfprintf+0xe6>
 3b2:	8c 36       	cpi	r24, 0x6C	; 108
 3b4:	21 f4       	brne	.+8      	; 0x3be <vfprintf+0xe2>
 3b6:	83 2d       	mov	r24, r3
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	38 2e       	mov	r3, r24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <vfprintf+0xe6>
 3be:	88 36       	cpi	r24, 0x68	; 104
 3c0:	41 f4       	brne	.+16     	; 0x3d2 <vfprintf+0xf6>
 3c2:	f7 01       	movw	r30, r14
 3c4:	93 fd       	sbrc	r25, 3
 3c6:	85 91       	lpm	r24, Z+
 3c8:	93 ff       	sbrs	r25, 3
 3ca:	81 91       	ld	r24, Z+
 3cc:	7f 01       	movw	r14, r30
 3ce:	81 11       	cpse	r24, r1
 3d0:	b3 cf       	rjmp	.-154    	; 0x338 <vfprintf+0x5c>
 3d2:	98 2f       	mov	r25, r24
 3d4:	9f 7d       	andi	r25, 0xDF	; 223
 3d6:	95 54       	subi	r25, 0x45	; 69
 3d8:	93 30       	cpi	r25, 0x03	; 3
 3da:	28 f4       	brcc	.+10     	; 0x3e6 <vfprintf+0x10a>
 3dc:	0c 5f       	subi	r16, 0xFC	; 252
 3de:	1f 4f       	sbci	r17, 0xFF	; 255
 3e0:	9f e3       	ldi	r25, 0x3F	; 63
 3e2:	99 83       	std	Y+1, r25	; 0x01
 3e4:	0d c0       	rjmp	.+26     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e6:	83 36       	cpi	r24, 0x63	; 99
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <vfprintf+0x11a>
 3ea:	83 37       	cpi	r24, 0x73	; 115
 3ec:	71 f0       	breq	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ee:	83 35       	cpi	r24, 0x53	; 83
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <vfprintf+0x118>
 3f2:	59 c0       	rjmp	.+178    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3f4:	21 c0       	rjmp	.+66     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3f6:	f8 01       	movw	r30, r16
 3f8:	80 81       	ld	r24, Z
 3fa:	89 83       	std	Y+1, r24	; 0x01
 3fc:	0e 5f       	subi	r16, 0xFE	; 254
 3fe:	1f 4f       	sbci	r17, 0xFF	; 255
 400:	88 24       	eor	r8, r8
 402:	83 94       	inc	r8
 404:	91 2c       	mov	r9, r1
 406:	53 01       	movw	r10, r6
 408:	13 c0       	rjmp	.+38     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 40a:	28 01       	movw	r4, r16
 40c:	f2 e0       	ldi	r31, 0x02	; 2
 40e:	4f 0e       	add	r4, r31
 410:	51 1c       	adc	r5, r1
 412:	f8 01       	movw	r30, r16
 414:	a0 80       	ld	r10, Z
 416:	b1 80       	ldd	r11, Z+1	; 0x01
 418:	36 fe       	sbrs	r3, 6
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	69 2d       	mov	r22, r9
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	6f ef       	ldi	r22, 0xFF	; 255
 424:	7f ef       	ldi	r23, 0xFF	; 255
 426:	c5 01       	movw	r24, r10
 428:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <strnlen>
 42c:	4c 01       	movw	r8, r24
 42e:	82 01       	movw	r16, r4
 430:	f3 2d       	mov	r31, r3
 432:	ff 77       	andi	r31, 0x7F	; 127
 434:	3f 2e       	mov	r3, r31
 436:	16 c0       	rjmp	.+44     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 438:	28 01       	movw	r4, r16
 43a:	22 e0       	ldi	r18, 0x02	; 2
 43c:	42 0e       	add	r4, r18
 43e:	51 1c       	adc	r5, r1
 440:	f8 01       	movw	r30, r16
 442:	a0 80       	ld	r10, Z
 444:	b1 80       	ldd	r11, Z+1	; 0x01
 446:	36 fe       	sbrs	r3, 6
 448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44a:	69 2d       	mov	r22, r9
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	6f ef       	ldi	r22, 0xFF	; 255
 452:	7f ef       	ldi	r23, 0xFF	; 255
 454:	c5 01       	movw	r24, r10
 456:	0e 94 4f 03 	call	0x69e	; 0x69e <strnlen_P>
 45a:	4c 01       	movw	r8, r24
 45c:	f3 2d       	mov	r31, r3
 45e:	f0 68       	ori	r31, 0x80	; 128
 460:	3f 2e       	mov	r3, r31
 462:	82 01       	movw	r16, r4
 464:	33 fc       	sbrc	r3, 3
 466:	1b c0       	rjmp	.+54     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 468:	82 2d       	mov	r24, r2
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	88 16       	cp	r8, r24
 46e:	99 06       	cpc	r9, r25
 470:	b0 f4       	brcc	.+44     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 472:	b6 01       	movw	r22, r12
 474:	80 e2       	ldi	r24, 0x20	; 32
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 47c:	2a 94       	dec	r2
 47e:	f4 cf       	rjmp	.-24     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 480:	f5 01       	movw	r30, r10
 482:	37 fc       	sbrc	r3, 7
 484:	85 91       	lpm	r24, Z+
 486:	37 fe       	sbrs	r3, 7
 488:	81 91       	ld	r24, Z+
 48a:	5f 01       	movw	r10, r30
 48c:	b6 01       	movw	r22, r12
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 494:	21 10       	cpse	r2, r1
 496:	2a 94       	dec	r2
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	82 1a       	sub	r8, r18
 49c:	91 08       	sbc	r9, r1
 49e:	81 14       	cp	r8, r1
 4a0:	91 04       	cpc	r9, r1
 4a2:	71 f7       	brne	.-36     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 4a4:	e8 c0       	rjmp	.+464    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	11 f0       	breq	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	89 36       	cpi	r24, 0x69	; 105
 4ac:	41 f5       	brne	.+80     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4ae:	f8 01       	movw	r30, r16
 4b0:	37 fe       	sbrs	r3, 7
 4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4b4:	60 81       	ld	r22, Z
 4b6:	71 81       	ldd	r23, Z+1	; 0x01
 4b8:	82 81       	ldd	r24, Z+2	; 0x02
 4ba:	93 81       	ldd	r25, Z+3	; 0x03
 4bc:	0c 5f       	subi	r16, 0xFC	; 252
 4be:	1f 4f       	sbci	r17, 0xFF	; 255
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c2:	60 81       	ld	r22, Z
 4c4:	71 81       	ldd	r23, Z+1	; 0x01
 4c6:	07 2e       	mov	r0, r23
 4c8:	00 0c       	add	r0, r0
 4ca:	88 0b       	sbc	r24, r24
 4cc:	99 0b       	sbc	r25, r25
 4ce:	0e 5f       	subi	r16, 0xFE	; 254
 4d0:	1f 4f       	sbci	r17, 0xFF	; 255
 4d2:	f3 2d       	mov	r31, r3
 4d4:	ff 76       	andi	r31, 0x6F	; 111
 4d6:	3f 2e       	mov	r3, r31
 4d8:	97 ff       	sbrs	r25, 7
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4dc:	90 95       	com	r25
 4de:	80 95       	com	r24
 4e0:	70 95       	com	r23
 4e2:	61 95       	neg	r22
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	f0 68       	ori	r31, 0x80	; 128
 4ec:	3f 2e       	mov	r3, r31
 4ee:	2a e0       	ldi	r18, 0x0A	; 10
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	a3 01       	movw	r20, r6
 4f4:	0e 94 a1 03 	call	0x742	; 0x742 <__ultoa_invert>
 4f8:	88 2e       	mov	r8, r24
 4fa:	86 18       	sub	r8, r6
 4fc:	45 c0       	rjmp	.+138    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 4fe:	85 37       	cpi	r24, 0x75	; 117
 500:	31 f4       	brne	.+12     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 502:	23 2d       	mov	r18, r3
 504:	2f 7e       	andi	r18, 0xEF	; 239
 506:	b2 2e       	mov	r11, r18
 508:	2a e0       	ldi	r18, 0x0A	; 10
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	25 c0       	rjmp	.+74     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 50e:	93 2d       	mov	r25, r3
 510:	99 7f       	andi	r25, 0xF9	; 249
 512:	b9 2e       	mov	r11, r25
 514:	8f 36       	cpi	r24, 0x6F	; 111
 516:	c1 f0       	breq	.+48     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 518:	18 f4       	brcc	.+6      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51a:	88 35       	cpi	r24, 0x58	; 88
 51c:	79 f0       	breq	.+30     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 51e:	b5 c0       	rjmp	.+362    	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 520:	80 37       	cpi	r24, 0x70	; 112
 522:	19 f0       	breq	.+6      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 524:	88 37       	cpi	r24, 0x78	; 120
 526:	21 f0       	breq	.+8      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 528:	b0 c0       	rjmp	.+352    	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 52a:	e9 2f       	mov	r30, r25
 52c:	e0 61       	ori	r30, 0x10	; 16
 52e:	be 2e       	mov	r11, r30
 530:	b4 fe       	sbrs	r11, 4
 532:	0d c0       	rjmp	.+26     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 534:	fb 2d       	mov	r31, r11
 536:	f4 60       	ori	r31, 0x04	; 4
 538:	bf 2e       	mov	r11, r31
 53a:	09 c0       	rjmp	.+18     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 53c:	34 fe       	sbrs	r3, 4
 53e:	0a c0       	rjmp	.+20     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 540:	29 2f       	mov	r18, r25
 542:	26 60       	ori	r18, 0x06	; 6
 544:	b2 2e       	mov	r11, r18
 546:	06 c0       	rjmp	.+12     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 548:	28 e0       	ldi	r18, 0x08	; 8
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 54e:	20 e1       	ldi	r18, 0x10	; 16
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 554:	20 e1       	ldi	r18, 0x10	; 16
 556:	32 e0       	ldi	r19, 0x02	; 2
 558:	f8 01       	movw	r30, r16
 55a:	b7 fe       	sbrs	r11, 7
 55c:	07 c0       	rjmp	.+14     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 55e:	60 81       	ld	r22, Z
 560:	71 81       	ldd	r23, Z+1	; 0x01
 562:	82 81       	ldd	r24, Z+2	; 0x02
 564:	93 81       	ldd	r25, Z+3	; 0x03
 566:	0c 5f       	subi	r16, 0xFC	; 252
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	06 c0       	rjmp	.+12     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 56c:	60 81       	ld	r22, Z
 56e:	71 81       	ldd	r23, Z+1	; 0x01
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 5f       	subi	r16, 0xFE	; 254
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	a3 01       	movw	r20, r6
 57a:	0e 94 a1 03 	call	0x742	; 0x742 <__ultoa_invert>
 57e:	88 2e       	mov	r8, r24
 580:	86 18       	sub	r8, r6
 582:	fb 2d       	mov	r31, r11
 584:	ff 77       	andi	r31, 0x7F	; 127
 586:	3f 2e       	mov	r3, r31
 588:	36 fe       	sbrs	r3, 6
 58a:	0d c0       	rjmp	.+26     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 58c:	23 2d       	mov	r18, r3
 58e:	2e 7f       	andi	r18, 0xFE	; 254
 590:	a2 2e       	mov	r10, r18
 592:	89 14       	cp	r8, r9
 594:	58 f4       	brcc	.+22     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 596:	34 fe       	sbrs	r3, 4
 598:	0b c0       	rjmp	.+22     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 59a:	32 fc       	sbrc	r3, 2
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 59e:	83 2d       	mov	r24, r3
 5a0:	8e 7e       	andi	r24, 0xEE	; 238
 5a2:	a8 2e       	mov	r10, r24
 5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5a6:	b8 2c       	mov	r11, r8
 5a8:	a3 2c       	mov	r10, r3
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ac:	b8 2c       	mov	r11, r8
 5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b0:	b9 2c       	mov	r11, r9
 5b2:	a4 fe       	sbrs	r10, 4
 5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5b6:	fe 01       	movw	r30, r28
 5b8:	e8 0d       	add	r30, r8
 5ba:	f1 1d       	adc	r31, r1
 5bc:	80 81       	ld	r24, Z
 5be:	80 33       	cpi	r24, 0x30	; 48
 5c0:	21 f4       	brne	.+8      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c2:	9a 2d       	mov	r25, r10
 5c4:	99 7e       	andi	r25, 0xE9	; 233
 5c6:	a9 2e       	mov	r10, r25
 5c8:	09 c0       	rjmp	.+18     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5ca:	a2 fe       	sbrs	r10, 2
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5ce:	b3 94       	inc	r11
 5d0:	b3 94       	inc	r11
 5d2:	04 c0       	rjmp	.+8      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5d4:	8a 2d       	mov	r24, r10
 5d6:	86 78       	andi	r24, 0x86	; 134
 5d8:	09 f0       	breq	.+2      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5da:	b3 94       	inc	r11
 5dc:	a3 fc       	sbrc	r10, 3
 5de:	11 c0       	rjmp	.+34     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5e0:	a0 fe       	sbrs	r10, 0
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5e4:	b2 14       	cp	r11, r2
 5e6:	88 f4       	brcc	.+34     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5e8:	28 0c       	add	r2, r8
 5ea:	92 2c       	mov	r9, r2
 5ec:	9b 18       	sub	r9, r11
 5ee:	0e c0       	rjmp	.+28     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5f0:	b2 14       	cp	r11, r2
 5f2:	60 f4       	brcc	.+24     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5f4:	b6 01       	movw	r22, r12
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 5fe:	b3 94       	inc	r11
 600:	f7 cf       	rjmp	.-18     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 602:	b2 14       	cp	r11, r2
 604:	18 f4       	brcc	.+6      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 606:	2b 18       	sub	r2, r11
 608:	02 c0       	rjmp	.+4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 60a:	98 2c       	mov	r9, r8
 60c:	21 2c       	mov	r2, r1
 60e:	a4 fe       	sbrs	r10, 4
 610:	10 c0       	rjmp	.+32     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 612:	b6 01       	movw	r22, r12
 614:	80 e3       	ldi	r24, 0x30	; 48
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 61c:	a2 fe       	sbrs	r10, 2
 61e:	17 c0       	rjmp	.+46     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 620:	a1 fc       	sbrc	r10, 1
 622:	03 c0       	rjmp	.+6      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 624:	88 e7       	ldi	r24, 0x78	; 120
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 62a:	88 e5       	ldi	r24, 0x58	; 88
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	b6 01       	movw	r22, r12
 630:	0c c0       	rjmp	.+24     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 632:	8a 2d       	mov	r24, r10
 634:	86 78       	andi	r24, 0x86	; 134
 636:	59 f0       	breq	.+22     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 638:	a1 fe       	sbrs	r10, 1
 63a:	02 c0       	rjmp	.+4      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 63c:	8b e2       	ldi	r24, 0x2B	; 43
 63e:	01 c0       	rjmp	.+2      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 640:	80 e2       	ldi	r24, 0x20	; 32
 642:	a7 fc       	sbrc	r10, 7
 644:	8d e2       	ldi	r24, 0x2D	; 45
 646:	b6 01       	movw	r22, r12
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 64e:	89 14       	cp	r8, r9
 650:	38 f4       	brcc	.+14     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 652:	b6 01       	movw	r22, r12
 654:	80 e3       	ldi	r24, 0x30	; 48
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 65c:	9a 94       	dec	r9
 65e:	f7 cf       	rjmp	.-18     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
 660:	8a 94       	dec	r8
 662:	f3 01       	movw	r30, r6
 664:	e8 0d       	add	r30, r8
 666:	f1 1d       	adc	r31, r1
 668:	80 81       	ld	r24, Z
 66a:	b6 01       	movw	r22, r12
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 672:	81 10       	cpse	r8, r1
 674:	f5 cf       	rjmp	.-22     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 676:	22 20       	and	r2, r2
 678:	09 f4       	brne	.+2      	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 67a:	42 ce       	rjmp	.-892    	; 0x300 <vfprintf+0x24>
 67c:	b6 01       	movw	r22, r12
 67e:	80 e2       	ldi	r24, 0x20	; 32
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 65 03 	call	0x6ca	; 0x6ca <fputc>
 686:	2a 94       	dec	r2
 688:	f6 cf       	rjmp	.-20     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 68a:	f6 01       	movw	r30, r12
 68c:	86 81       	ldd	r24, Z+6	; 0x06
 68e:	97 81       	ldd	r25, Z+7	; 0x07
 690:	02 c0       	rjmp	.+4      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	9f ef       	ldi	r25, 0xFF	; 255
 696:	2b 96       	adiw	r28, 0x0b	; 11
 698:	e2 e1       	ldi	r30, 0x12	; 18
 69a:	0c 94 1b 04 	jmp	0x836	; 0x836 <__epilogue_restores__>

0000069e <strnlen_P>:
 69e:	fc 01       	movw	r30, r24
 6a0:	05 90       	lpm	r0, Z+
 6a2:	61 50       	subi	r22, 0x01	; 1
 6a4:	70 40       	sbci	r23, 0x00	; 0
 6a6:	01 10       	cpse	r0, r1
 6a8:	d8 f7       	brcc	.-10     	; 0x6a0 <strnlen_P+0x2>
 6aa:	80 95       	com	r24
 6ac:	90 95       	com	r25
 6ae:	8e 0f       	add	r24, r30
 6b0:	9f 1f       	adc	r25, r31
 6b2:	08 95       	ret

000006b4 <strnlen>:
 6b4:	fc 01       	movw	r30, r24
 6b6:	61 50       	subi	r22, 0x01	; 1
 6b8:	70 40       	sbci	r23, 0x00	; 0
 6ba:	01 90       	ld	r0, Z+
 6bc:	01 10       	cpse	r0, r1
 6be:	d8 f7       	brcc	.-10     	; 0x6b6 <strnlen+0x2>
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	8e 0f       	add	r24, r30
 6c6:	9f 1f       	adc	r25, r31
 6c8:	08 95       	ret

000006ca <fputc>:
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	fb 01       	movw	r30, r22
 6d4:	23 81       	ldd	r18, Z+3	; 0x03
 6d6:	21 fd       	sbrc	r18, 1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <fputc+0x16>
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	9f ef       	ldi	r25, 0xFF	; 255
 6de:	2c c0       	rjmp	.+88     	; 0x738 <fputc+0x6e>
 6e0:	22 ff       	sbrs	r18, 2
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <fputc+0x46>
 6e4:	46 81       	ldd	r20, Z+6	; 0x06
 6e6:	57 81       	ldd	r21, Z+7	; 0x07
 6e8:	24 81       	ldd	r18, Z+4	; 0x04
 6ea:	35 81       	ldd	r19, Z+5	; 0x05
 6ec:	42 17       	cp	r20, r18
 6ee:	53 07       	cpc	r21, r19
 6f0:	44 f4       	brge	.+16     	; 0x702 <fputc+0x38>
 6f2:	a0 81       	ld	r26, Z
 6f4:	b1 81       	ldd	r27, Z+1	; 0x01
 6f6:	9d 01       	movw	r18, r26
 6f8:	2f 5f       	subi	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	31 83       	std	Z+1, r19	; 0x01
 6fe:	20 83       	st	Z, r18
 700:	8c 93       	st	X, r24
 702:	26 81       	ldd	r18, Z+6	; 0x06
 704:	37 81       	ldd	r19, Z+7	; 0x07
 706:	2f 5f       	subi	r18, 0xFF	; 255
 708:	3f 4f       	sbci	r19, 0xFF	; 255
 70a:	37 83       	std	Z+7, r19	; 0x07
 70c:	26 83       	std	Z+6, r18	; 0x06
 70e:	14 c0       	rjmp	.+40     	; 0x738 <fputc+0x6e>
 710:	8b 01       	movw	r16, r22
 712:	ec 01       	movw	r28, r24
 714:	fb 01       	movw	r30, r22
 716:	00 84       	ldd	r0, Z+8	; 0x08
 718:	f1 85       	ldd	r31, Z+9	; 0x09
 71a:	e0 2d       	mov	r30, r0
 71c:	09 95       	icall
 71e:	89 2b       	or	r24, r25
 720:	e1 f6       	brne	.-72     	; 0x6da <fputc+0x10>
 722:	d8 01       	movw	r26, r16
 724:	16 96       	adiw	r26, 0x06	; 6
 726:	8d 91       	ld	r24, X+
 728:	9c 91       	ld	r25, X
 72a:	17 97       	sbiw	r26, 0x07	; 7
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	17 96       	adiw	r26, 0x07	; 7
 730:	9c 93       	st	X, r25
 732:	8e 93       	st	-X, r24
 734:	16 97       	sbiw	r26, 0x06	; 6
 736:	ce 01       	movw	r24, r28
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	08 95       	ret

00000742 <__ultoa_invert>:
 742:	fa 01       	movw	r30, r20
 744:	aa 27       	eor	r26, r26
 746:	28 30       	cpi	r18, 0x08	; 8
 748:	51 f1       	breq	.+84     	; 0x79e <__ultoa_invert+0x5c>
 74a:	20 31       	cpi	r18, 0x10	; 16
 74c:	81 f1       	breq	.+96     	; 0x7ae <__ultoa_invert+0x6c>
 74e:	e8 94       	clt
 750:	6f 93       	push	r22
 752:	6e 7f       	andi	r22, 0xFE	; 254
 754:	6e 5f       	subi	r22, 0xFE	; 254
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	af 4f       	sbci	r26, 0xFF	; 255
 75e:	b1 e0       	ldi	r27, 0x01	; 1
 760:	3e d0       	rcall	.+124    	; 0x7de <__ultoa_invert+0x9c>
 762:	b4 e0       	ldi	r27, 0x04	; 4
 764:	3c d0       	rcall	.+120    	; 0x7de <__ultoa_invert+0x9c>
 766:	67 0f       	add	r22, r23
 768:	78 1f       	adc	r23, r24
 76a:	89 1f       	adc	r24, r25
 76c:	9a 1f       	adc	r25, r26
 76e:	a1 1d       	adc	r26, r1
 770:	68 0f       	add	r22, r24
 772:	79 1f       	adc	r23, r25
 774:	8a 1f       	adc	r24, r26
 776:	91 1d       	adc	r25, r1
 778:	a1 1d       	adc	r26, r1
 77a:	6a 0f       	add	r22, r26
 77c:	71 1d       	adc	r23, r1
 77e:	81 1d       	adc	r24, r1
 780:	91 1d       	adc	r25, r1
 782:	a1 1d       	adc	r26, r1
 784:	20 d0       	rcall	.+64     	; 0x7c6 <__ultoa_invert+0x84>
 786:	09 f4       	brne	.+2      	; 0x78a <__ultoa_invert+0x48>
 788:	68 94       	set
 78a:	3f 91       	pop	r19
 78c:	2a e0       	ldi	r18, 0x0A	; 10
 78e:	26 9f       	mul	r18, r22
 790:	11 24       	eor	r1, r1
 792:	30 19       	sub	r19, r0
 794:	30 5d       	subi	r19, 0xD0	; 208
 796:	31 93       	st	Z+, r19
 798:	de f6       	brtc	.-74     	; 0x750 <__ultoa_invert+0xe>
 79a:	cf 01       	movw	r24, r30
 79c:	08 95       	ret
 79e:	46 2f       	mov	r20, r22
 7a0:	47 70       	andi	r20, 0x07	; 7
 7a2:	40 5d       	subi	r20, 0xD0	; 208
 7a4:	41 93       	st	Z+, r20
 7a6:	b3 e0       	ldi	r27, 0x03	; 3
 7a8:	0f d0       	rcall	.+30     	; 0x7c8 <__ultoa_invert+0x86>
 7aa:	c9 f7       	brne	.-14     	; 0x79e <__ultoa_invert+0x5c>
 7ac:	f6 cf       	rjmp	.-20     	; 0x79a <__ultoa_invert+0x58>
 7ae:	46 2f       	mov	r20, r22
 7b0:	4f 70       	andi	r20, 0x0F	; 15
 7b2:	40 5d       	subi	r20, 0xD0	; 208
 7b4:	4a 33       	cpi	r20, 0x3A	; 58
 7b6:	18 f0       	brcs	.+6      	; 0x7be <__ultoa_invert+0x7c>
 7b8:	49 5d       	subi	r20, 0xD9	; 217
 7ba:	31 fd       	sbrc	r19, 1
 7bc:	40 52       	subi	r20, 0x20	; 32
 7be:	41 93       	st	Z+, r20
 7c0:	02 d0       	rcall	.+4      	; 0x7c6 <__ultoa_invert+0x84>
 7c2:	a9 f7       	brne	.-22     	; 0x7ae <__ultoa_invert+0x6c>
 7c4:	ea cf       	rjmp	.-44     	; 0x79a <__ultoa_invert+0x58>
 7c6:	b4 e0       	ldi	r27, 0x04	; 4
 7c8:	a6 95       	lsr	r26
 7ca:	97 95       	ror	r25
 7cc:	87 95       	ror	r24
 7ce:	77 95       	ror	r23
 7d0:	67 95       	ror	r22
 7d2:	ba 95       	dec	r27
 7d4:	c9 f7       	brne	.-14     	; 0x7c8 <__ultoa_invert+0x86>
 7d6:	00 97       	sbiw	r24, 0x00	; 0
 7d8:	61 05       	cpc	r22, r1
 7da:	71 05       	cpc	r23, r1
 7dc:	08 95       	ret
 7de:	9b 01       	movw	r18, r22
 7e0:	ac 01       	movw	r20, r24
 7e2:	0a 2e       	mov	r0, r26
 7e4:	06 94       	lsr	r0
 7e6:	57 95       	ror	r21
 7e8:	47 95       	ror	r20
 7ea:	37 95       	ror	r19
 7ec:	27 95       	ror	r18
 7ee:	ba 95       	dec	r27
 7f0:	c9 f7       	brne	.-14     	; 0x7e4 <__ultoa_invert+0xa2>
 7f2:	62 0f       	add	r22, r18
 7f4:	73 1f       	adc	r23, r19
 7f6:	84 1f       	adc	r24, r20
 7f8:	95 1f       	adc	r25, r21
 7fa:	a0 1d       	adc	r26, r0
 7fc:	08 95       	ret

000007fe <__prologue_saves__>:
 7fe:	2f 92       	push	r2
 800:	3f 92       	push	r3
 802:	4f 92       	push	r4
 804:	5f 92       	push	r5
 806:	6f 92       	push	r6
 808:	7f 92       	push	r7
 80a:	8f 92       	push	r8
 80c:	9f 92       	push	r9
 80e:	af 92       	push	r10
 810:	bf 92       	push	r11
 812:	cf 92       	push	r12
 814:	df 92       	push	r13
 816:	ef 92       	push	r14
 818:	ff 92       	push	r15
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	cd b7       	in	r28, 0x3d	; 61
 824:	de b7       	in	r29, 0x3e	; 62
 826:	ca 1b       	sub	r28, r26
 828:	db 0b       	sbc	r29, r27
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	f8 94       	cli
 82e:	de bf       	out	0x3e, r29	; 62
 830:	0f be       	out	0x3f, r0	; 63
 832:	cd bf       	out	0x3d, r28	; 61
 834:	09 94       	ijmp

00000836 <__epilogue_restores__>:
 836:	2a 88       	ldd	r2, Y+18	; 0x12
 838:	39 88       	ldd	r3, Y+17	; 0x11
 83a:	48 88       	ldd	r4, Y+16	; 0x10
 83c:	5f 84       	ldd	r5, Y+15	; 0x0f
 83e:	6e 84       	ldd	r6, Y+14	; 0x0e
 840:	7d 84       	ldd	r7, Y+13	; 0x0d
 842:	8c 84       	ldd	r8, Y+12	; 0x0c
 844:	9b 84       	ldd	r9, Y+11	; 0x0b
 846:	aa 84       	ldd	r10, Y+10	; 0x0a
 848:	b9 84       	ldd	r11, Y+9	; 0x09
 84a:	c8 84       	ldd	r12, Y+8	; 0x08
 84c:	df 80       	ldd	r13, Y+7	; 0x07
 84e:	ee 80       	ldd	r14, Y+6	; 0x06
 850:	fd 80       	ldd	r15, Y+5	; 0x05
 852:	0c 81       	ldd	r16, Y+4	; 0x04
 854:	1b 81       	ldd	r17, Y+3	; 0x03
 856:	aa 81       	ldd	r26, Y+2	; 0x02
 858:	b9 81       	ldd	r27, Y+1	; 0x01
 85a:	ce 0f       	add	r28, r30
 85c:	d1 1d       	adc	r29, r1
 85e:	0f b6       	in	r0, 0x3f	; 63
 860:	f8 94       	cli
 862:	de bf       	out	0x3e, r29	; 62
 864:	0f be       	out	0x3f, r0	; 63
 866:	cd bf       	out	0x3d, r28	; 61
 868:	ed 01       	movw	r28, r26
 86a:	08 95       	ret

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
