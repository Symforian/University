
cylon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000594  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c80  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED_DDR DDRD
#define LED_PORT PORTD
#define DELAYTIME 85 

int main() {
  UCSR0B  &= ~_BV(RXEN0) & ~_BV(TXEN0); //Enable PD0 & PD1
  80:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  84:	87 7e       	andi	r24, 0xE7	; 231
  86:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  uint8_t i = 0;
  LED_DDR = 0xff;               // Data Direction Register B all set up for output 
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a b9       	out	0x0a, r24	; 10
#define LED_PORT PORTD
#define DELAYTIME 85 

int main() {
  UCSR0B  &= ~_BV(RXEN0) & ~_BV(TXEN0); //Enable PD0 & PD1
  uint8_t i = 0;
  8e:	80 e0       	ldi	r24, 0x00	; 0
    LED_PORT = (1 << i);                 /* illuminate only i'th pin */
    _delay_ms(DELAYTIME);                                    /* wait */
    i = i + 1;                               /* move to the next LED */ 
    }
    while (i > 0)  {
    LED_PORT = (1 << i);                 /* illuminate only i'th pin */
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	50 e0       	ldi	r21, 0x00	; 0
int main() {
  UCSR0B  &= ~_BV(RXEN0) & ~_BV(TXEN0); //Enable PD0 & PD1
  uint8_t i = 0;
  LED_DDR = 0xff;               // Data Direction Register B all set up for output 
  while (1) {
    while (i < 7) {
  94:	87 30       	cpi	r24, 0x07	; 7
  96:	90 f0       	brcs	.+36     	; 0xbc <main+0x3c>
    LED_PORT = (1 << i);                 /* illuminate only i'th pin */
    _delay_ms(DELAYTIME);                                    /* wait */
    i = i + 1;                               /* move to the next LED */ 
    }
    while (i > 0)  {
    LED_PORT = (1 << i);                 /* illuminate only i'th pin */
  98:	9a 01       	movw	r18, r20
  9a:	08 2e       	mov	r0, r24
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <main+0x20>
  9e:	22 0f       	add	r18, r18
  a0:	0a 94       	dec	r0
  a2:	ea f7       	brpl	.-6      	; 0x9e <main+0x1e>
  a4:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f e7       	ldi	r18, 0x7F	; 127
  a8:	36 e2       	ldi	r19, 0x26	; 38
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
    _delay_ms(DELAYTIME);                                    /* wait */
    i = i - 1;                           /* move to the previous LED */    
  b8:	81 50       	subi	r24, 0x01	; 1
    while (i < 7) {
    LED_PORT = (1 << i);                 /* illuminate only i'th pin */
    _delay_ms(DELAYTIME);                                    /* wait */
    i = i + 1;                               /* move to the next LED */ 
    }
    while (i > 0)  {
  ba:	71 f7       	brne	.-36     	; 0x98 <main+0x18>
  UCSR0B  &= ~_BV(RXEN0) & ~_BV(TXEN0); //Enable PD0 & PD1
  uint8_t i = 0;
  LED_DDR = 0xff;               // Data Direction Register B all set up for output 
  while (1) {
    while (i < 7) {
    LED_PORT = (1 << i);                 /* illuminate only i'th pin */
  bc:	9a 01       	movw	r18, r20
  be:	08 2e       	mov	r0, r24
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <main+0x44>
  c2:	22 0f       	add	r18, r18
  c4:	0a 94       	dec	r0
  c6:	ea f7       	brpl	.-6      	; 0xc2 <main+0x42>
  c8:	2b b9       	out	0x0b, r18	; 11
  ca:	2f e7       	ldi	r18, 0x7F	; 127
  cc:	36 e2       	ldi	r19, 0x26	; 38
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x50>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5a>
  da:	00 00       	nop
    _delay_ms(DELAYTIME);                                    /* wait */
    i = i + 1;                               /* move to the next LED */ 
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	da cf       	rjmp	.-76     	; 0x94 <main+0x14>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
