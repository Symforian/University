fn my_first_interpreter(code: &str) -> String {
    if code == "" {return "".to_string();}
    let mut acc = 0u8;
    let mut ret = "".to_string();
    let outputs:String= code.to_string().chars().filter(|&x| x == '+' || x == '.').collect::<String>();
    let outputs:Vec<&str>  = outputs.split('.').collect();
    let outputs:Vec<u8> = outputs[0..outputs.len()-1].iter().map(|&x| x.len() as u8).collect();
    for c in outputs{
        acc = acc.wrapping_add(c);
        ret.push(acc as char);
    }
    ret
}

fn main() {
    println!("Hello, world!");
}
#[cfg(test)]
mod tests {
    use super::my_first_interpreter;
    
    #[test]
    fn alphabeth() {
  assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+."), "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    }
    #[test]
    fn helloworld() {
  assert_eq!(my_first_interpreterello, World!");
    }
    #[test]
    fn notcommand() {
  assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+n.n*wcasn."), "ABCDEFGHIJKLMNOPQRSTUVWXYZZ");
    }

    #[test]
    fn wth() {
  assert_eq!(my_first_interpreter("+.++++.++++++++++++.+++++++++++++++++++.+++..+++.++++.+++.++++++++++.+++++++.+++++++++++.+.+++++++.+++++++.+++.++\u{cf443}.+++++++++++.+++.+++++++++.+++++++++++\u{109da4}++++++.++++\u{86e15}+.++++++...++++++++++++++++++++++++++++++++++++++++++.+++++++++++.+++++++++++++.+.++++++++.+++++++++.+++++++..+.++++.+..+++++++++++++++++++++++++++++.+.++.++++.+++.++++.+++++++++++++++++\u{109544}.+++++++.++.++.+++++.++++++++++++.+++++++猨++++++++++++.++++++++++++++++++++++++.+++++++.++.++.++++++++++++\u{60ab7}+++++++++++++++++++++++.+++++.++++++.++.\u{8acbc}+++++++\u{b79f8}+++"),"\u{1}\u{5}\u{11}$''*.1;BMNU\\_alox\u{89}\u{8e}\u{94}\u{94}\u{94}¾ÉÖ×ßèïïðôõõ\u{12}\u{13}\u{15}\u{19}\u{1c} 18:<AM`x\u{7f}\u{81}\u{83}¦«±³");
    }

    #[test]
    fn empty() {
  assert_eq!(my_first_interpreter(""),"");
    }

    #[test]
    fn a5() {
  assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++....."),"AAAAA");
    }

    #[test]
    fn a5_with_noncommands() {
  assert_eq!(my_first_interpreter("+++++++++++++ds++++++++f+++++++++++++++f++cz+++++++++fd+adf++++++++++er+++++++...as.."),"AAAAA");
    }

    #[test]
    fn op() {
  assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++.++++++++++++++...++.++++++++++++++++++++++++++++++++.")," ...0P");
    }

    #[test]
    fn numbers() {
  assert_eq!(my_first_interpreter("++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+.++++++++"),"0123456789");
    }

    #[test]
    fn ministring_in_ministring() {
  assert_eq!(my_first_interpreter("+++++++++++++++++++++++++++++++++++++++++++.....+++...+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++......+++."), "+++++...++++++.");
    }


}
